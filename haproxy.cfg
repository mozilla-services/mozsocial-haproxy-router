# TODO: move this entire config to the k8s deployment a la nginx?
#
global
  log stdout format raw local0 info

defaults
  mode http
  timeout connect 5000ms
  timeout client 50000ms
  timeout server 50000ms
  log-format '{"time":"%Tl","remote_addr":"%ci","src":"%[src]","remote_user":"%[capture.req.hdr(7),json(utf8s)]","request":"%r","status":"%ST","log_type":"access","bytes_sent":"%B","request_time":"%Tr","referrer":"%[capture.req.hdr(2),json(utf8s)]","user_agent":"%[capture.req.hdr(3),json(utf8s)]","x_forwarded_for":"%[capture.req.hdr(1),json(utf8s)]","x_forwarded_proto":"%[capture.req.hdr(5),json(utf8s)]","x_ratelimit_remaining":"%[capture.res.hdr(0),json(utf8s)]","x_ratelimit_limit":"%[capture.res.hdr(1),json(utf8s)]","x_ratelimit_reset":"%[capture.res.hdr(2),json(utf8s)]","x_request_id":"%[capture.res.hdr(3),json(utf8s)]"}'


frontend router
  bind :8080
  log global

  # Note order matters, we pull this based on index in the log format
  capture request header Host len 200
  capture request header X-Forwarded-For len 200
  capture request header Referer len 200
  capture request header User-Agent len 200
  capture request header RemoteAddr len 200
  capture request header X-Forwarded-Proto len 5
  capture request header x-cloud-trace-context len 200
  capture request header RemoteUser len 200

  capture response header x-ratelimit-remaining len 20
  capture response header x-ratelimit-limit len 20
  capture response header x-ratelimit-reset len 200
  capture response header x-request-id len 200

  # "health" checks
  http-request return status 200 content-type text/plain string ok if { path /__nginxheartbeat__ } || { path /__lbheartbeat__ }

  # route to a backend based on path's prefix and content-type header
  acl is_activitypub_request req.hdr(content-type) -i "application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\""
  # Make sure the streaming api is routed to mastodons streaming socket
  use_backend streaming if { path_beg /api/v1/streaming }
  # Go to mastodon if its an apub request
  use_backend mastodon if is_activitypub_request
  # Elk Asset files
  use_backend elk if { path_beg /_nuxt } || { path_beg /__nuxt_error } || { path_beg /avatars } || { path_beg /emojis } || { path_beg /fonts } || { path_beg /shiki } || { path '/favicon.ico' } || { path '/logo.svg' } || { path '/apple-touch-icon.png' } || { path_beg /manifest } || { path '/sw.js' } || { path_beg /web-share-target }
  #Elk internal API
  use_backend elk if { path_beg "/api/${MASTODON_HOSTNAME-stage.moztodon.nonprod.webservices.mozgcp.net}" } || { path_beg /api/list-servers }
  # Elk sign in URL
  use_backend elk if { path_beg '/signin/callback' }
  # Invitation microservice
  use_backend invitation if { path_beg /api/invitation }
  # Cinder-Mastodon Bridge microservice
  use_backend cmbridge if { path_beg /en-US/about/legal/report-infringement-form }
  # Content Feed API
  use_backend content-feed if { path_beg /content-feed }
  # All other apis should go to mastodon
  use_backend mastodon if { path_beg /api }
  # specific /settings to allow for elk (rest should go to mastodon)
  use_backend elk if { path /settings } || { path_beg /settings/profile } || { path /settings/interface } || { path_beg /settings/notifications } || { path /settings/language }  || { path /settings/preferences }
  # Rewrite some urls to our own
  use_backend rewrite-publish if { path '/publish' }
  # Route all these urls to the Elk interface
  use_backend elk if { path / } || { path '/compose' } || { path /settings } || { path /bookmarks } || { path '/conversations' } || { path '/favourites' } || { path '/home' } || { path '/public' } || { path '/search' }
  # secondary line because haproxy doesnt allow more then 240 characters
  use_backend elk if { path '/explore' } || { path '/discover' } || { path_beg '/list' } || { path '/local' } || { path '/notifications' } || { path '/public/local' } || { path_beg /@ } || { path_beg /tags }
  # TEMP: prepare for invites; prevent access to mastodon invites page since it doesn't do anything on our instance
  use_backend elk if { path '/invites' }
  # Redirect old mastodon urls to new ones
  use_backend mastodon-legacy-redirs if { path /about/more } || { path /oauth/authorize/native } || { path /web }
  # Fall back to mastodon
  use_backend mastodon

backend mastodon-legacy-redirs
  http-request replace-path /about/more /about
  http-request replace-path /oauth/authorize/native /auth/sign_in
  http-request replace-path /web /
  http-request redirect prefix "https://${ROUTER_HOSTNAME-stage.moztodon.nonprod.webservices.mozgcp.net}"

backend invitation
  http-request set-header Host "${MOZSOC_ACCTS_HOSTNAME-stage.mozsoc-accts.nonprod.webservices.mozgcp.net}"
  http-request set-header X-Forwarded-Proto https if { ssl_fc } # For Proto
  http-request add-header X-Real-Ip %[src] # Custom header with src IP
  option forwardfor if-none # X-forwarded-for
  server accounts "${MOZSOC_ACCTS_SERVICE_AND_PORT-mozsoc-accts.mozsoc-accts-stage.svc.cluster.local:8080}" maxconn "${MAXCONN_MOZSOC_ACCTS-50}"

backend cmbridge
  http-request redirect location "https://${CMBRIDGE_HOSTNAME-stage.cm-bridge.nonprod.webservices.mozgcp.net}/infringement-form"

backend mastodon
  # if the request is the /auth/sign_in intersisteall, we remove the referer header because mastodon usually overrides
  # the stored oidc redirect if it was navigated to from the same host domain and theres a referer header
  # By deleting it here we avoid updating both elk and mastodon code and allow our client to run on the same domain as Mastodon
  # https://github.com/MozillaSocial/mastodon/blob/main/app/controllers/application_controller.rb#L67
  http-request del-header referer if { path '/auth/sign_in' }
  http-request set-header Host "${MASTODON_HOSTNAME-stage.moztodon.nonprod.webservices.mozgcp.net}"
  http-request set-header X-Forwarded-Proto https if { ssl_fc } # For Proto
  http-request add-header X-Real-Ip %[src] # Custom header with src IP
  option forwardfor if-none # X-forwarded-for
  server mastodon "${MASTODON_SERVICE_AND_PORT-web.moztodon-stage.svc.cluster.local:8080}" maxconn "${MAXCONN_MASTODON-50}"

backend streaming
  http-request set-header Host "${MASTODON_HOSTNAME-stage.moztodon.nonprod.webservices.mozgcp.net}"
  http-request set-header X-Forwarded-Proto https if { ssl_fc } # For Proto
  http-request add-header X-Real-Ip %[src] # Custom header with src IP
  option forwardfor if-none # X-forwarded-for
  server mastodon "${MASTODON_STREAMING_SERVICE_AND_PORT-streaming.moztodon-stage.svc.cluster.local:4000}" maxconn "${MAXCONN_MASTODON_STREAMING-50}"
  http-response set-header X-Server mastodon-streaming

backend rewrite-publish
  http-request replace-path /publish(.*) /compose\1
  http-request redirect prefix "https://${ROUTER_HOSTNAME-stage.moztodon.nonprod.webservices.mozgcp.net}"

backend elk
  http-request set-header X-Forwarded-Proto https if { ssl_fc } # For Proto
  http-request add-header X-Real-Ip %[src] # Custom header with src IP
  option forwardfor if-none # X-forwarded-for
  server elk "${ELK_SERVICE_AND_PORT-elk.elk-stage.svc.cluster.local:8080}" maxconn "${MAXCONN_ELK-50}"
  http-response set-header X-Server elk

backend content-feed
  http-request replace-path /content-feed(.*) \1
  http-request set-header Host "${CONTENT_FEED_HOSTNAME-stage.content-feed-service.nonprod.webservices.mozgcp.net}"
  http-request set-header X-Forwarded-Proto https if { ssl_fc } # For Proto
  http-request add-header X-Real-Ip %[src] # Custom header with src IP
  option forwardfor if-none # X-forwarded-for
  server content_feed "${CONTENT_FEED_SERVICE_AND_PORT-content-feed-service.content-feed-service-stage.svc.cluster.local:8080}" maxconn "$MAXCONN_CONTENT_FEED-50}"
  http-response set-header X-Server content-feed
